@Library('my-shared-library@main') _

pipeline{

    agent any

    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: 'AWS Account ID', defaultValue: '211125402309')
        string(name: 'Region', description: 'Region of ECR', defaultValue: 'eu-west-3')
        string(name: 'ECR_REPO_NAME', description: 'name of the ECR', defaultValue: 'isebastienstore')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'my-eks-cluster')
    }
    environment{

        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    }

    stages{
        stage('git Checkout'){
            when { expression {  params.action == 'create' } }
            steps{
                script{
                    gitCheckout(
                        branch: "main",
                        url: "https://github.com/isebastienstore/ci-cd-app.git"
                    )
                }
            }
        }

        stage('clean'){
            when { expression {  params.action == 'create' } }
            steps{
                script{
                    clean()
                }
            }
        }

        stage('Initializing Terraform'){
            steps{
                script{
                    dir('eks_module'){
                        bat """
                         set AWS_ACCESS_KEY_ID=%ACCESS_KEY%
                         set AWS_SECRET_ACCESS_KEY=%SECRET_KEY%

                            terraform init -backend-config="bucket=cicd-terraform--eks" -backend-config="key=eks/terraform.tfstate" -backend-config="region=eu-west-3" -force-copy

                            """
                    }
                }
            }
        }

        stage('Formatting Terraform Code'){
            steps{
                script{
                    dir('eks_module'){
                        bat 'terraform fmt'
                    }
                }
            }
        }

        stage('Validating Terraform'){
            steps{
                script{
                    dir('eks_module'){
                        bat 'terraform validate'
                    }
                }
            }
        }

        stage('Previewing the Infra using Terraform'){
            steps{
                script{
                    dir('eks_module'){
                        bat """
                            set AWS_ACCESS_KEY_ID=%ACCESS_KEY%
                            set AWS_SECRET_ACCESS_KEY=%SECRET_KEY%
                            terraform plan
                        """
                    }
                    //input(message: "Are you sure to proceed?", ok: "Proceed")
                }
            }
        }

        stage('Creating an EKS Cluster'){
            steps{
                script{
                    dir('eks_module') {
                        bat """
                            set AWS_ACCESS_KEY_ID=%ACCESS_KEY%
                            set AWS_SECRET_ACCESS_KEY=%SECRET_KEY%
                            terraform apply --auto-approve
                            """
                    }
                }
            }
        }

        stage('Deployment on EKS Cluster'){
            when { expression {  params.action == 'create' } }
            steps{
                script{
                    withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                                     string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_KEY_ID')]) {
                        withEnv(["AWS_DEFAULT_REGION=${params.Region}"]) {
                            bat """
                                aws configure set aws_access_key_id %AWS_ACCESS_KEY_ID%
                                aws configure set aws_secret_access_key %AWS_SECRET_ACCESS_KEY%
                                aws eks --region %AWS_DEFAULT_REGION% update-kubeconfig --name ${params.cluster}
                                kubectl apply -f deployment.yaml --validate=false
                            """
                        }
                    }
                }
            }
        }
    }
}
